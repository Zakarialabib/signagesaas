---
description: 
globs: 
alwaysApply: true
---
# Livewire Component Patterns

This document outlines the standard patterns used for Livewire components in our digital signage SaaS application.

## Component Architecture

Our application uses a consistent pattern for Livewire components:

1. **Manager Components**: List and manage entities
   - Example: [DeviceManager](mdc:app/Livewire/Devices/DeviceManager.php), [ScreenManager](mdc:app/Livewire/Screens/ScreenManager.php)
   - Handle filtering, pagination, and dispatching events to other components

2. **CRUD Components**: Handle Create, Read, Update, Delete operations
   - Create: [DeviceCreate](mdc:app/Livewire/Devices/DeviceCreate.php), [ScreenCreateForm](mdc:app/Livewire/Screens/ScreenCreateForm.php)
   - Show: [DeviceShow](mdc:app/Livewire/Devices/DeviceShow.php), [ScreenShow](mdc:app/Livewire/Screens/ScreenShow.php)
   - Edit: [DeviceEdit](mdc:app/Livewire/Devices/DeviceEdit.php), [ScreenEditForm](mdc:app/Livewire/Screens/ScreenEditForm.php)

## Livewire Attributes

We use Livewire v3 attributes extensively:

- `#[Layout]`: Specify the layout for full-page components
- `#[Locked]`: Protect properties from client-side updates
- `#[Validate]`: Define validation rules for properties
- `#[Title]` : Define title of the page
- `#[On]`: Listen for events from other components
- `#[Computed]`: Define computed properties (cached getters)

 and other useful 

## Event Communication

Our standard event naming convention is:

1. **Action Events** (kebab-case):
   - `create-entity`: Open creation modal/form
   - `edit-entity`: Open edit modal/form with entity loaded
   - `show-entity`: Open detail modal/view with entity loaded
   - `delete-entity`: Confirm deletion of entity

2. **Result Events** (kebab-case):
   - `entity-created`: Dispatched after successful creation
   - `entity-updated`: Dispatched after successful update
   - `entity-deleted`: Dispatched after successful deletion

## Modal Pattern

Modals follow a consistent pattern:

1. Components manage their own modal state (e.g., `showDeviceModal`)
2. The `#[On]` attribute listens for events to open modals
3. Events carry entity IDs to load data
4. Blade templates use the `<x-modal>` component

## Authentication and Authorization

All components implement proper authorization:

- `mount()` methods check `viewAny` permission
- CRUD operations check appropriate permissions via `$this->authorize()`
- Components show/hide UI elements based on permissions

## Tenant Awareness

All components are tenant-aware:

- They use the `BelongsToTenant` trait on models
- Queries are automatically scoped to current tenant
- Tenancy middleware ensures proper isolation


