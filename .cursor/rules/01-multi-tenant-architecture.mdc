---
description: 
globs: 
alwaysApply: false
---
# Multi-Tenant Architecture , Architecture & Security

This application follows a multi-tenant architecture using the stancl/tenancy package to provide tenant isolation.

## Tenant Configuration

The multi-tenant setup includes:

1. **Domain-based Tenancy**: Each tenant gets their own subdomain (e.g., `client1.signagesaas.com`)
2. **Database Isolation**: Each tenant has isolated database tables
3. **Storage Isolation**: Tenant assets are stored in isolated storage locations

# Multi-Tenant 

This application implements a secure multi-tenant architecture where each customer (tenant) has their own isolated environment within a single application instance.

## Tenant Architecture

The multi-tenant architecture is built using the @stancl/tenancy package with the following key features:

1. **Domain-Based Tenancy**
   - Each tenant gets their own subdomain (e.g., `client1.signagesaas.com`)
   - Central domain hosts marketing and authentication pages
   - Tenant resolution happens via domain in middleware

2. **Database Isolation**
   - Tenant-specific data stored in isolated database tables
   - Automatic scoping of queries to the current tenant
   - Migrations separated between central and tenant-specific

3. **Storage Isolation**
   - Tenant media stored in isolated S3/R2 buckets
   - Path-based isolation for local storage during development
   - Automatic scoping of file operations to current tenant

## Tenant Implementation

### Tenant Middleware

- @InitializeTenancyByDomain: Identifies tenant by domain and initializes the context
- Routes are wrapped with appropriate tenant middleware
- Custom middleware ensures proper tenant switching

```php
Route::middleware([
    'web',
    'auth',
    'universal',
    InitializeTenancyByDomain::class
])->group(function () {
    // Tenant-specific routes
});
```

## Authentication & Authorization

### Authentication

- Uses Laravel's built-in authentication system
- Tenant-aware login and registration flows
- Support for multiple authentication guards

### Authorization

- Policy-based authorization for all resources
- Tenant-aware policies that enforce isolation
- RBAC (Role-Based Access Control) implementation

### Authorization in Components

All Livewire components include appropriate authorization checks:

```php
public function mount(): void
{
    // Check if user can view any devices
    $this->authorize('viewAny', Device::class);
}

public function mount(Device $device): void
{
    // Check if user can view this specific device
    $this->authorize('view', $device);
}
```

## Security Measures

1. **Cross-Tenant Protection**
   - Route model binding includes tenant validation
   - Eloquent queries automatically scoped to current tenant
   - Policy checks validate tenant ownership

2. **API Security**
   - JWT-based authentication for device APIs
   - Device activation tokens for secure device registration
   - Rate limiting to prevent abuse

3. **Data Protection**
   - Input validation on all user inputs
   - CSRF protection on all forms
   - XSS prevention via proper output escaping

4. **Audit Logging**
   - All security-critical actions are logged
   - Tenant-specific audit logs
   - Immutable audit trail for compliance

